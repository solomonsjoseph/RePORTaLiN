Logging System
==============

**For Developers:** This document describes the centralized logging system used
throughout the RePORTaLiN project's utility scripts.

Overview
--------

The logging system provides consistent, structured logging across all utility
scripts to help track operations, debug issues, and maintain audit trails.

All logs are stored in the ``.logs/`` directory at the repository root.

Log Files
---------

The following log files are automatically created and maintained:

version_updates.log
~~~~~~~~~~~~~~~~~~~

**Purpose:** Tracks all version bumps performed by the automated versioning system.

**Location:** ``.logs/version_updates.log``

**Format:**
::

    [YYYY-MM-DD HH:MM:SS] Version bumped: X.Y.Z → X.Y.Z (type: TYPE) | Commit: MESSAGE

**Example:**
::

    [2025-10-29 18:22:19] Version bumped: 0.8.5 → 0.8.6 (type: patch) | Commit: fix: correct version parsing logic

**Generated by:**

- ``.git/hooks/bump-version``
- ``scripts/utils/smart-commit.sh``

smart_commit.log
~~~~~~~~~~~~~~~~

**Purpose:** Records all smart commit operations including validation and errors.

**Location:** ``.logs/smart_commit.log``

**Format:**
::

    [YYYY-MM-DD HH:MM:SS] [LEVEL] MESSAGE

**Levels:** INFO, SUCCESS, WARNING, ERROR

**Example:**
::

    [2025-10-29 18:30:45] [INFO] Smart commit initiated with message: feat: add new feature
    [2025-10-29 18:30:46] [INFO] Current version: 0.8.6
    [2025-10-29 18:30:47] [SUCCESS] Version bumped: 0.8.6 → 0.9.0
    [2025-10-29 18:30:48] [SUCCESS] Commit completed: feat: add new feature

**Generated by:**

- ``scripts/utils/smart-commit.sh``

docs_style_check.log
~~~~~~~~~~~~~~~~~~~~

**Purpose:** Logs documentation style compliance check results.

**Location:** ``.logs/docs_style_check.log``

**Format:**
::

    [YYYY-MM-DD HH:MM:SS] [LEVEL] MESSAGE

**Levels:** INFO, WARNING, ERROR, SUCCESS

**Example:**
::

    [2025-10-29 19:00:00] [INFO] Documentation style check started
    [2025-10-29 19:00:01] [INFO] Header check passed: installation.rst
    [2025-10-29 19:00:05] [SUCCESS] All compliance checks PASSED

**Generated by:**

- ``scripts/utils/check_docs_style.sh``

pre_commit_version.log
~~~~~~~~~~~~~~~~~~~~~~

**Purpose:** Logs pre-commit hook executions for automatic version bumping.

**Location:** ``.logs/pre_commit_version.log``

**Format:**
::

    [YYYY-MM-DD HH:MM:SS] [LEVEL] MESSAGE

**Levels:** INFO, SUCCESS, WARNING, ERROR

**Example:**
::

    [2025-10-29 20:00:00] [INFO] Pre-commit hook started
    [2025-10-29 20:00:01] [INFO] Current version: 0.8.6
    [2025-10-29 20:00:02] [SUCCESS] Version bumped: 0.8.6 → 0.9.0
    [2025-10-29 20:00:03] [INFO] Version file staged

**Generated by:**

- ``.git/hooks/pre-commit``

prepare_commit_msg.log
~~~~~~~~~~~~~~~~~~~~~~

**Purpose:** Logs prepare-commit-msg hook executions for VS Code commit integration.

**Location:** ``.logs/prepare_commit_msg.log``

**Format:**
::

    [YYYY-MM-DD HH:MM:SS] [LEVEL] MESSAGE

**Levels:** INFO, SUCCESS, WARNING, ERROR

**Example:**
::

    [2025-10-29 20:05:00] [INFO] Prepare-commit-msg hook started
    [2025-10-29 20:05:01] [INFO] Commit message: feat: add new dashboard
    [2025-10-29 20:05:02] [SUCCESS] Version bumped: 0.9.0 → 0.10.0
    [2025-10-29 20:05:03] [INFO] Version file staged for commit

**Generated by:**

- ``.git/hooks/prepare-commit-msg``

quality_check.log
~~~~~~~~~~~~~~~~~

**Purpose:** Comprehensive documentation quality analysis logs.

**Location:** ``.logs/quality_check.log``

**Format:**
::

    YYYY-MM-DD HH:MM:SS - doc_quality_checker - LEVEL - MESSAGE

**Levels:** INFO, WARNING, ERROR

**Example:**
::

    2025-10-29 19:15:00 - doc_quality_checker - INFO - Initialized DocumentationQualityChecker v0.8.6
    2025-10-29 19:15:01 - doc_quality_checker - WARNING - [VERSION] api/modules.rst:45 - Old version reference: 0.0.5

**Generated by:**

- ``scripts/utils/check_documentation_quality.py``

pre_commit.log
~~~~~~~~~~~~~~

**Purpose:** Logs pre-commit hook executions for documentation checks.

**Location:** ``.logs/pre_commit.log``

**Format:**
::

    [YYYY-MM-DD HH:MM:SS] [LEVEL] MESSAGE

**Levels:** INFO, WARNING, ERROR, SUCCESS

**Example:**
::

    [2025-10-29 20:00:00] [INFO] Pre-commit hook started
    [2025-10-29 20:00:01] [INFO] Modified file: docs/sphinx/user_guide/installation.rst
    [2025-10-29 20:00:05] [SUCCESS] Pre-commit checks passed

**Generated by:**

- ``.git/hooks/pre-commit.optional`` (when enabled)

Log Management
--------------

Log Rotation
~~~~~~~~~~~~

Currently, logs are appended indefinitely. For production deployments, consider
implementing log rotation using system tools like ``logrotate`` on Linux or manual
periodic cleanup.

Viewing Logs
~~~~~~~~~~~~

View recent entries:
::

    # Last 20 entries from version updates
    tail -20 .logs/version_updates.log
    
    # Last 50 entries from smart commit
    tail -50 .logs/smart_commit.log
    
    # Follow quality check logs in real-time
    tail -f .logs/quality_check.log

Search logs:
::

    # Find all errors in smart commit log
    grep ERROR .logs/smart_commit.log
    
    # Find commits that triggered minor version bumps
    grep "type: minor" .logs/version_updates.log
    
    # Find documentation warnings
    grep WARNING .logs/docs_style_check.log

Cleaning Logs
~~~~~~~~~~~~~

To clean old logs (use with caution):
::

    # Archive logs older than 30 days
    find .logs -name "*.log" -mtime +30 -exec gzip {} \;
    
    # Remove archived logs older than 90 days
    find .logs -name "*.log.gz" -mtime +90 -delete

Best Practices
--------------

1. **Regular Monitoring:** Review logs weekly to catch patterns or recurring issues.

2. **Error Investigation:** When scripts fail, always check corresponding log files
   for detailed error information.

3. **Log Preservation:** Before major refactoring, archive logs for comparison.

4. **Size Monitoring:** Monitor log file sizes, especially in CI/CD environments.

5. **Sensitive Data:** Logs do not contain sensitive data, but verify before sharing.

Integration with Scripts
------------------------

Adding Logging to New Scripts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Bash scripts:**
::

    #!/bin/bash
    
    # Setup logging
    REPO_ROOT=$(git rev-parse --show-toplevel)
    LOG_DIR="$REPO_ROOT/.logs"
    LOG_FILE="$LOG_DIR/your_script.log"
    mkdir -p "$LOG_DIR"
    
    # Logging function
    log_message() {
        local level="$1"
        local message="$2"
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    }
    
    # Use it
    log_message "INFO" "Operation started"
    log_message "ERROR" "Something went wrong"

**Python scripts:**
::

    import logging
    from pathlib import Path
    
    # Setup logging
    repo_root = Path(__file__).parent.parent.parent
    log_dir = repo_root / '.logs'
    log_dir.mkdir(exist_ok=True)
    
    logging.basicConfig(
        filename=log_dir / 'your_script.log',
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Use it
    logging.info("Operation started")
    logging.error("Something went wrong")

Troubleshooting
---------------

Logs Not Created
~~~~~~~~~~~~~~~~

**Symptom:** Log files are not being created.

**Solutions:**

1. Check directory permissions:
   ::

       ls -ld .logs/

2. Verify script has write access:
   ::

       touch .logs/test.log && rm .logs/test.log

3. Check disk space:
   ::

       df -h .

Log Files Too Large
~~~~~~~~~~~~~~~~~~~

**Symptom:** Log files consuming significant disk space.

**Solutions:**

1. Implement log rotation (see Log Rotation section above)

2. Review and reduce log verbosity in scripts

3. Archive old logs periodically

Missing Log Entries
~~~~~~~~~~~~~~~~~~~

**Symptom:** Expected log entries are missing.

**Solutions:**

1. Verify script completed successfully (check exit codes)

2. Check for script errors that prevented logging:
   ::

       echo $?  # Check last command exit code

3. Review script logic to ensure log calls are not skipped

See Also
--------

- :doc:`../developer_guide/git_workflow` - Git workflow and version management
- :doc:`../developer_guide/testing` - Testing procedures
- :mod:`scripts.utils.logging` - Python logging utilities

.. versionadded:: 0.8.6
   Centralized logging system with standardized format across all utility scripts.
